   Introduction of Trees

 * A tree data structure is a hierarchical structure that is used to represent and organise data in way that is easy to navigate and search

 * It is a collection of nodes that are connected by edges and has a hierarchical relationship between the nodes.

 *  The topmost node of the tree is called the root, and the nodes below it are called the child nodes. Each node can have multiple child nodes, and these child nodes can also have their own child nodes, forming a recursive structure.

This data structure is a specialized method to organize and store data in the computer to be used more effectively. It consists of a central node, structural nodes, and sub-nodes, which are connected via edges. We can also say that tree data structure has roots, branches, and leaves connected with one another.

Basic Terminologies In Tree Data Structure:
1. Parent Node
2. Child Node
3. Root Node
4. Leaf Node or External Node
5. Ancestor of a Node
6. Descendant
7. Sibling
8. Level of a node 
9. Neighbour of a Node
10. Subtree

## Types of tree Data Structure

1. Binary tree
2. Ternary tree
3. N-ary tree


## Basic Operation of tree Data structure
1. create:- create a tree in the data structure
2. Insert:- Insert data in a tree.
3. Search:- searches specific data in a tree to check wheater it is present or not.


## Tree Traversal
1. In-order Traversal: left-root-right
2. Pre-Order Traversal : root-left-right
3. Post-Order Traversal: left-right-root

ques: Why tree is considered a non-linear data-structure

ans: The data in a tree are not stored in a sequential manner i.e they are not stored linearly. Instead they are arranged on multiple 
levels or we can say it is hierarchical structure. For this reason the tree tree is considered to be non-linera dta structure.

Properties of Tree Data Structure:
Number of edges: An edge can be defined as the connection between two nodes. If a tree has N nodes then it will have (N-1) edges. There is only one path from each node to any other node of the tree.
Depth of a node: The depth of a node is defined as the length of the path from the root to that node. Each edge adds 1 unit of length to the path. So, it can also be defined as the number of edges in the path from the root of the tree to the node.
Height of a node: The height of a node can be defined as the length of the longest path from the node to a leaf node of the tree.
Height of the Tree: The height of a tree is the length of the longest path from the root of the tree to a leaf node of the tree.
Degree of a Node: The total count of subtrees attached to that node is called the degree of the node. The degree of a leaf node must be 0. The degree of a tree is the maximum degree of a node among all the nodes in the tree.


Application of Tree Data Structure:
1.File System:  This allows for efficient navigation and organization of files.
2.Data Compression: Huffman coding is a popular technique for data compression that involves constructing a binary tree where the leaves represent characters and their frequency of occurrence. The resulting tree is used to encode the data in a way that minimizes the amount of storage required.
3.Compiler Design: In compiler design, a syntax tree is used to represent the structure of a program. 
4.Database Indexing: B-trees and other tree structures are used in database indexing to efficiently search for and retrieve data. 

Advantages of Tree Data Structure:
*Tree offer Efficient Searching Depending on the type of tree, with average search times of O(log n) for balanced trees like AVL. 
*Trees provide a hierarchical representation of data, making it easy to organize and navigate large amounts of information.
*The recursive nature of trees makes them easy to traverse and manipulate using recursive algorithms.

Disadvantages of Tree Data Structure:
*Unbalanced Trees, meaning that the height of the tree is skewed towards one side, which can lead to inefficient search times.
*Trees demand more memory space requirements than some other data structures like arrays and linked lists, especially if the tree is very large.
*The implementation and manipulation of trees can be complex and require a good understanding of the algorithms.